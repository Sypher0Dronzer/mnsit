import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import time
from google.colab import drive
drive.mount('/content/drive')

start = time.time()

data = pd.read_csv("/content/drive/MyDrive/mnist_train.csv")
data_test = pd.read_csv("/content/drive/MyDrive/mnist_test.csv")

data = np.array(data).T
data_test = np.array(data_test).T

n,m = data.shape
o,p = data_test.shape

x_train = data[1:n]
y_train = data[0]

x_test = data_test[1:o]
y_test = data_test[0]

x_train = x_train/255
x_test = x_test/255

def ReLU(t):
    return np.maximum(t, 0)

def softmax(t):
    A = np.exp(t) / sum(np.exp(t))
    return A

def ReLU_deriv(t):
    return t > 0

def one_hot(Y):
    one_hot_Y = np.zeros((Y.size, Y.max() + 1))
    one_hot_Y[np.arange(Y.size), Y] = 1
    one_hot_Y = one_hot_Y.T
    return one_hot_Y


def init_params():
    W1 = np.random.normal(0, np.sqrt(2/794), size = (10, 784))
    W2 = np.random.normal(0, np.sqrt(2/20), size = (10, 10))
    b1 = np.zeros((10,1),  dtype=np.float32)
    b2 = np.zeros((10,1),  dtype=np.float32)
    return W1, b1, W2, b2

def forward_prop(W1, b1, W2, b2, X):
    Z1 = W1.dot(X) + b1
    A1 = ReLU(Z1)
    Z2 = W2.dot(A1) + b2
    A2 = softmax(Z2)
    return Z1, A1, Z2, A2

def backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):
    one_hot_Y = one_hot(Y)
    dZ2 = A2 - one_hot_Y
    dW2 = 1 / m * dZ2.dot(A1.T)
    db2 = 1 / m * np.sum(dZ2)
    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)
    dW1 = 1 / m * dZ1.dot(X.T)
    db1 = 1 / m * np.sum(dZ1)
    return dW1, db1, dW2, db2

def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):
    W1 = W1 - alpha * dW1
    b1 = b1 - alpha * db1
    W2 = W2 - alpha * dW2
    b2 = b2 - alpha * db2
    return W1, b1, W2, b2

def get_predictions(A2):
    return np.argmax(A2, 0)

def get_accuracy(predictions, Y):
    print(predictions, Y)
    return np.sum(predictions == Y) / Y.size

def learning_rate_decay(alpha, iteration, decay_rate):
    return alpha / (1 + decay_rate * iteration)

def gradient_descent(X, Y, alpha, iterations, batch_size, decay_rate):
    W1, b1, W2, b2 = init_params()

    for i in range(iterations):
        current_alpha = learning_rate_decay(alpha, i, decay_rate)

        for batch_start in range(0, X.shape[1], batch_size):
            batch_end = batch_start + batch_size
            X_batch = X[:, batch_start:batch_end]
            Y_batch = Y[batch_start:batch_end]

            Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X_batch)
            dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X_batch, Y_batch)
            W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, current_alpha)

        if i % 10 == 0:
            print("Iteration: ", i)
            predictions = get_predictions(A2)
            print("Accuracy:", get_accuracy(predictions, Y_batch))


        if i == iterations - 1:
            predictions = get_predictions(A2)
            print("Accuracy:", get_accuracy(predictions, Y_batch))
            end = time.time()
            print("Runtime = " + str(end - start) + "s")

    return W1, b1, W2, b2


W1, b1, W2, b2 = gradient_descent(x_train, y_train, 0.17, 500, 1024, 0.001)


